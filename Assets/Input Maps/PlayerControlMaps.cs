//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Maps/PlayerControlMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlMaps"",
    ""maps"": [
        {
            ""name"": ""FPSPlayingMap"",
            ""id"": ""b1d6cfc5-7f60-48c5-adcb-2956be6c11a2"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2035e5ce-66ba-42ac-990e-47e4ac6b8676"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.1,y=0.1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""002b9284-ba3b-41a3-b1cf-250368d1e169"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""148778d1-820a-47e3-96b5-458a34cda418"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cce992fc-9cfb-4d7a-b30d-ef3065883f16"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractAlternate"",
                    ""type"": ""Button"",
                    ""id"": ""68af0795-d2de-4c98-855a-455a9da24390"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f21c056f-00c9-4ca1-9320-036f0ea24aeb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2052a3e8-a7c3-4960-8185-8759e9210b62"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7c2a037f-4945-4b55-8f9c-d7a6669d485d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc2c8705-07dc-4456-8644-ca2b2792750b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1fa92d70-e9aa-4086-9f28-90b4eba8eab9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9955f867-b7df-45ca-a582-87345709d609"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3cab7cd6-9638-4450-8817-19dafefb6e26"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a3d7d15-ff70-4cd5-b001-86631f1e8e2d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c0eea7c-5db6-4cd7-9c63-58620934bed2"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSPlayingMap
        m_FPSPlayingMap = asset.FindActionMap("FPSPlayingMap", throwIfNotFound: true);
        m_FPSPlayingMap_Look = m_FPSPlayingMap.FindAction("Look", throwIfNotFound: true);
        m_FPSPlayingMap_Move = m_FPSPlayingMap.FindAction("Move", throwIfNotFound: true);
        m_FPSPlayingMap_Sprint = m_FPSPlayingMap.FindAction("Sprint", throwIfNotFound: true);
        m_FPSPlayingMap_Interact = m_FPSPlayingMap.FindAction("Interact", throwIfNotFound: true);
        m_FPSPlayingMap_InteractAlternate = m_FPSPlayingMap.FindAction("InteractAlternate", throwIfNotFound: true);
    }

    ~@PlayerControlMaps()
    {
        UnityEngine.Debug.Assert(!m_FPSPlayingMap.enabled, "This will cause a leak and performance issues, PlayerControlMaps.FPSPlayingMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSPlayingMap
    private readonly InputActionMap m_FPSPlayingMap;
    private List<IFPSPlayingMapActions> m_FPSPlayingMapActionsCallbackInterfaces = new List<IFPSPlayingMapActions>();
    private readonly InputAction m_FPSPlayingMap_Look;
    private readonly InputAction m_FPSPlayingMap_Move;
    private readonly InputAction m_FPSPlayingMap_Sprint;
    private readonly InputAction m_FPSPlayingMap_Interact;
    private readonly InputAction m_FPSPlayingMap_InteractAlternate;
    public struct FPSPlayingMapActions
    {
        private @PlayerControlMaps m_Wrapper;
        public FPSPlayingMapActions(@PlayerControlMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_FPSPlayingMap_Look;
        public InputAction @Move => m_Wrapper.m_FPSPlayingMap_Move;
        public InputAction @Sprint => m_Wrapper.m_FPSPlayingMap_Sprint;
        public InputAction @Interact => m_Wrapper.m_FPSPlayingMap_Interact;
        public InputAction @InteractAlternate => m_Wrapper.m_FPSPlayingMap_InteractAlternate;
        public InputActionMap Get() { return m_Wrapper.m_FPSPlayingMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSPlayingMapActions set) { return set.Get(); }
        public void AddCallbacks(IFPSPlayingMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSPlayingMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSPlayingMapActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractAlternate.started += instance.OnInteractAlternate;
            @InteractAlternate.performed += instance.OnInteractAlternate;
            @InteractAlternate.canceled += instance.OnInteractAlternate;
        }

        private void UnregisterCallbacks(IFPSPlayingMapActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractAlternate.started -= instance.OnInteractAlternate;
            @InteractAlternate.performed -= instance.OnInteractAlternate;
            @InteractAlternate.canceled -= instance.OnInteractAlternate;
        }

        public void RemoveCallbacks(IFPSPlayingMapActions instance)
        {
            if (m_Wrapper.m_FPSPlayingMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSPlayingMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSPlayingMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSPlayingMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSPlayingMapActions @FPSPlayingMap => new FPSPlayingMapActions(this);
    public interface IFPSPlayingMapActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInteractAlternate(InputAction.CallbackContext context);
    }
}
